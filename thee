#!/usr/bin/python3

from polygon import *

# Alle maten in mm.

# Zakje: hoogte 77, breedte 65, dikte 7

# Boden ongeveer 200 breed, 150 diep

# 3 zakjes naast elkaar, 2mm speling, 5mm wood: 3*(65+2)+4*5 = 221
# 2 vakjes van 10 zakjes per kolom: 2*7*10+3*5 = 155

wood = 5
thee = [65 + 2, 7 * 10, 77]
vakjes = [3, 2, 1]
tand_maxlen = 50
h_mid = thee[2] - 10
h_mid_low = thee[2] - 20
r = 20

def num_teeth(l):
	'''Compute number of teeth based on the length of the line.
	Requirements:
	- tooth cannot be longer than tand_maxlen
	- the number of teeth must be odd
	- the minimum number of teeth is 3
	- the teeth are as long as possible
	'''
	target = l / tand_maxlen
	# actual number must be this or higher.
	# Make it integer and odd.
	itarget = math.ceil((target - 1) / 2) * 2 + 1
	# Return this or 3, whichever is higher.
	return max(3, itarget)

# Size of box without outer wood.
size = tuple(vakjes[i] * thee[i] + (vakjes[i] - 1) * wood for i in range(3))

def teeth(l, start = False, remove = True):
	ret = Part()
	n = num_teeth(l)
	l_tooth = l / n
	for t in range(0 if start else 1, n, 2):
		ret += rect(l_tooth, wood, -l / 2 + l_tooth * (t + .5), 0)
	if start and remove:
		for i in [-1, 1]:
			ret += rect(wood, wood, i * (l + wood) / 2, 0)
	return ret

def base():
	ret = rect(*(size[i] + 2 * wood for i in (0, 1)))
	for n in range(vakjes[1] + 1):
		ret -= teeth(size[0]) + V(0, -(size[1] + wood) / 2 + n * (thee[1] + wood))
	for n in range(vakjes[0] + 1):
		ret -= teeth(size[1]).rotate(90) + V(-(size[0] + wood) / 2 + n * (thee[0] + wood), 0)
	return ret

def sidel():
	ret = rect(*(size[i] + 2 * wood for i in (2, 1)))
	l = size[2] - (1 + 3 ** .5) * r
	# Remove "teeth"-part in curve.
	ret -= rect(size[2] - l + wood, wood, (size[2] - l + wood) / 2 - size[2] / 2 - wood, size[1] / 2 + wood / 2)
	# Back teeth.
	ret -= teeth(l, True, False) + V(-l / 2 + size[2] / 2, (size[1] + wood) / 2)
	# Curve on the back (part 1).
	ret += rect(3 ** .5 * r, r / 2, -(size[2] / 2 - 3 ** .5 / 2 * r - r), size[1] / 2 + r / 4) - circle(r = r, x = -(size[2] / 2 - r - r * 3 ** .5), y = size[1] / 2 + r);
	# Curve on the back (part 2).
	ret += circle(r = r, x = -(size[2] / 2 - r), y = size[1] / 2)
	# Connection to base.
	ret -= teeth(size[1], True).rotate(90) + V((size[2] + wood) / 2, 0)
	# Subdivisions.
	for n in range(1, vakjes[1]):
		ret -= teeth(h_mid_low) + V(size[2] / 2 - h_mid_low / 2, -(size[1] + wood) / 2 + n * (thee[1] + wood))
	# Front.
	ret -= teeth(size[2]) + V(0, -(size[1] + wood) / 2)
	# Top teeth.
	ret -= teeth(size[1], False).rotate(90) + V(-(size[2] + wood) / 2, 0)
	return ret

def sider():
	return sidel().mirror()

def midv():
	ret = rect(h_mid + wood, size[1] + 2 * wood)
	ret -= teeth(size[1], True).rotate(90) + V(-h_mid / 2, 0)
	for side in [-1, 1]:
		ret -= teeth(h_mid_low, True) + V(h_mid_low / 2 - h_mid / 2 + wood / 2, side * (size[1] + wood) / 2)
	for n in range(1, vakjes[1]):
		ret -= rect(h_mid_low / 2 + wood, wood, -(h_mid + wood) / 2 + (h_mid_low / 2 + wood) / 2, -(size[1] + wood) / 2 + n * (thee[1] + wood))
	corner = rect(h_mid, h_mid).rotate(45) + V((h_mid - wood) / 2 ** .5, 0) # - rect(wood, wood * 2, -wood / 2, 0)
	for n in range(vakjes[1] + 1):
		ret -= corner + V(h_mid / 2 + wood / 2 - (h_mid - h_mid_low), -(size[1] + wood) / 2 + n * (thee[1] + wood))
	return ret

def front():
	ret = rect(*(size[i] + 2 * wood for i in (0, 2)))
	ret -= teeth(size[0], True) + V(0, -(size[2] + wood) / 2)
	for side in [-1, 1]:
		ret -= teeth(size[2], True).rotate(90) + V(side * (size[0] + wood) / 2, 0)
	for n in range(1, vakjes[0]):
		ret -= teeth(h_mid_low).rotate(90) + V(-(size[0] + wood) / 2 + n * (thee[0] + wood), -size[2] / 2 + h_mid_low / 2)
	return ret

def midh():
	ret = rect(size[0] + 2 * wood, h_mid + wood)
	ret -= teeth(size[0], True) + V(0, -h_mid / 2)
	corner = rect(h_mid, h_mid).rotate(45) + V(0, (h_mid - wood) / 2 ** .5) # - rect(wood, wood * 2, -wood / 2, 0)
	for n in range(vakjes[0] + 1):
		ret -= corner + V(-(size[0] + wood) / 2 + n * (thee[0] + wood), h_mid / 2 + wood / 2 - (h_mid - h_mid_low))
	for side in [-1, 1]:
		ret -= teeth(h_mid_low, True).rotate(90) + V(side * (size[0] + wood) / 2, h_mid_low / 2 - h_mid / 2 + wood / 2)
	for n in range(1, vakjes[0]):
		ret -= rect(wood, h_mid_low / 2, -(size[0] + wood) / 2 + n * (thee[0] + wood), h_mid_low / 4 - (h_mid + wood) / 2 + h_mid_low / 2 + wood)
	return ret

def backtop():
	l = size[2] - (1 + 3 ** .5) * r
	curve = r * (math.pi / 2 + 2 * math.radians(60))
	h = size[1] + l + curve + 2 * wood
	ret = rect(size[0] + 2 * wood, h)
	ret -= teeth(size[0], True) + V(0, -h / 2 + wood / 2)
	for side in (-1, 1):
		ret -= teeth(l, True, False).rotate(90) + V(side * (size[0] + wood) / 2, -h / 2 + l / 2 + wood)
		ret -= teeth(size[1], True, False).rotate(90) + V(side * (size[0] + wood) / 2, -h / 2 + l + curve + wood + size[1] / 2)
		ret -= rect(wood, wood, side * (size[0] + wood) / 2, (h - wood) / 2)
	# Make bending cuts.
	uncut = 4 * wood
	num = max(1, round(curve / (2 * wood)))
	right = size[0] / 2 + wood
	left = -right
	start = -h / 2 + wood + l
	d = curve / num
	for i in range(num):
		ret += cut(P(left, start + d * i), P(-uncut / 2, start + d * i))
		ret += cut(P(right, start + d * i), P(uncut / 2, start + d * i))
		ret += cut(P(left + uncut, start + d * (i + .5)), P(right - uncut, start + d * (i + .5)))
	ret += cut(P(left, start + d * num), P(-uncut / 2, start + d * num))
	ret += cut(P(right, start + d * num), P(uncut / 2, start + d * num))
	return ret

#'''
midvs = Part()
for m in range(vakjes[0] - 1):
	midvs += midv() + V(h_mid + 2 * wood, 0) * m
midhs = Part()
for m in range(vakjes[1] - 1):
	midhs += midh() + V(size[0] + 2 * wood, 0) * m
svg(base(), sider(), backtop(), sidel(), midvs, front(), (midhs + V(0, size[2] + 1.5 * wood)), file = '/tmp/thee.svg')
#'''
#svg(front(), file = '/tmp/thee.svg')
